
==================== FINAL INTERFACE ====================
2019-07-04 18:46:05.959395 UTC

interface main@main:ShortestPath 8002
  interface hash: e0209f879673a28fe8601aed64a82b72
  ABI hash: b64913c440018ea7b2c008a4ce279a12
  export-list hash: 7bab5b0d6cd02c44d9e9121cb250f09f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bc3095f4b553734f0dadeae05b5c3808
  sig of: Nothing
  used TH splices: False
  where
exports:
  ShortestPath.groupsOf
  ShortestPath.optimalPath
  ShortestPath.roadStep
  ShortestPath.Label{ShortestPath.A ShortestPath.B ShortestPath.C}
  ShortestPath.Path
  ShortestPath.RoadSystem
  ShortestPath.Section{ShortestPath.Section getA getB getC}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
006a02dfdcd0b0e543a0cb5b88c170e0
  $fShowLabel :: GHC.Show.Show ShortestPath.Label
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ShortestPath.Label
                  ShortestPath.$fShowLabel_$cshowsPrec
                  ShortestPath.$fShowLabel_$cshow
                  ShortestPath.$fShowLabel_$cshowList -}
9432b915a78f82405ea6081d32a2f8a9
  $fShowLabel1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "C"#) -}
ce1341dc1eda17d59e0b12f9a4c28151
  $fShowLabel2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "B"#) -}
384293e7060bc2a545e15d0fdb4371e8
  $fShowLabel3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "A"#) -}
006a02dfdcd0b0e543a0cb5b88c170e0
  $fShowLabel_$cshow :: ShortestPath.Label -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ShortestPath.Label) ->
                 case x of wild {
                   ShortestPath.A -> ShortestPath.$fShowLabel3
                   ShortestPath.B -> ShortestPath.$fShowLabel2
                   ShortestPath.C -> ShortestPath.$fShowLabel1 }) -}
006a02dfdcd0b0e543a0cb5b88c170e0
  $fShowLabel_$cshowList :: [ShortestPath.Label] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ ShortestPath.Label
                   ShortestPath.$w$cshowsPrec) -}
006a02dfdcd0b0e543a0cb5b88c170e0
  $fShowLabel_$cshowsPrec ::
    GHC.Types.Int -> ShortestPath.Label -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: ShortestPath.Label)
                   (w2 :: GHC.Base.String) ->
                 ShortestPath.$w$cshowsPrec w1 w2) -}
93381fa2856156c6fbde615782ebacd7
  $fShowSection :: GHC.Show.Show ShortestPath.Section
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ShortestPath.Section
                  ShortestPath.$fShowSection_$cshowsPrec
                  ShortestPath.$fShowSection_$cshow
                  ShortestPath.$fShowSection_$cshowList -}
93381fa2856156c6fbde615782ebacd7
  $fShowSection1 :: ShortestPath.Section -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: ShortestPath.Section)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { ShortestPath.Section ww1 ww2 ww3 ->
                 ShortestPath.$w$cshowsPrec1 0# ww1 ww2 ww3 w1 }) -}
e88a26a894078e9d03bc8a48e0c1f613
  $fShowSection2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
c16fd6fa7056bd464f092edd8ee533c4
  $fShowSection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getC = "#) -}
64cf412b0e7adaceca2023e87c32dd20
  $fShowSection4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getB = "#) -}
cbf5fb9c254d28b8fdd7c6a2ecc3f92e
  $fShowSection5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
becd696b7cf0056f429b86bf886c5222
  $fShowSection6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getA = "#) -}
883d9d6b8915c2f827e2577adf728eab
  $fShowSection7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Section {"#) -}
93381fa2856156c6fbde615782ebacd7
  $fShowSection_$cshow :: ShortestPath.Section -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ShortestPath.Section) ->
                 ShortestPath.$fShowSection_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
93381fa2856156c6fbde615782ebacd7
  $fShowSection_$cshowList ::
    [ShortestPath.Section] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ ShortestPath.Section
                   ShortestPath.$fShowSection1) -}
93381fa2856156c6fbde615782ebacd7
  $fShowSection_$cshowsPrec ::
    GHC.Types.Int -> ShortestPath.Section -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: ShortestPath.Section)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { ShortestPath.Section ww3 ww4 ww5 ->
                 ShortestPath.$w$cshowsPrec1 ww1 ww3 ww4 ww5 w2 } }) -}
72eae57044431a1e29461d339852b5c2
  $tc'A :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7770910542922088756##
                   7964880889701698284##
                   ShortestPath.$trModule
                   ShortestPath.$tc'A1) -}
4f4c78dcbcef871f6c38057b25696d7b
  $tc'A1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'A"#) -}
c7f77d4deea36740148c50e463389891
  $tc'B :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14056734137310982492##
                   16543592450267206952##
                   ShortestPath.$trModule
                   ShortestPath.$tc'B1) -}
04ff52e7b4c1498804a4937214fb2ce8
  $tc'B1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'B"#) -}
45f07aab3ea2257a1e79f35c88c02211
  $tc'C :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   138519127047462438##
                   12482388045847619463##
                   ShortestPath.$trModule
                   ShortestPath.$tc'C1) -}
8c6673c4598a5d501ad3758c4b0d29d6
  $tc'C1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C"#) -}
b2d3d87338c3c7b01bf7c426e88f8e42
  $tc'Section :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   255860435809413415##
                   3963640236526034146##
                   ShortestPath.$trModule
                   ShortestPath.$tc'Section1) -}
18c230bdd4a3e061160586147d018042
  $tc'Section1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Section"#) -}
04707cbb83b113050d1416ba25189f00
  $tcLabel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14882692872920455551##
                   9171362656394089514##
                   ShortestPath.$trModule
                   ShortestPath.$tcLabel1) -}
305c3a5c2a1ae340fd9ccb4194a8fc3c
  $tcLabel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Label"#) -}
2c7952f37197544cfa49c2a6b4c0f924
  $tcSection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12124700367375602057##
                   16026796284598905789##
                   ShortestPath.$trModule
                   ShortestPath.$tcSection1) -}
2c4f132f96355206a23252e2bd55be73
  $tcSection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Section"#) -}
7741c7f8a67fedac071dfb376ef9442d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ShortestPath.$trModule2
                   ShortestPath.$trModule1) -}
779d2e10515581ff2bf4b683c1374e7b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ShortestPath"#) -}
2d4565c6fc71200cc71976fe9c285540
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
006a02dfdcd0b0e543a0cb5b88c170e0
  $w$cshowsPrec ::
    ShortestPath.Label -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: ShortestPath.Label) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   ShortestPath.A
                   -> GHC.Base.++ @ GHC.Types.Char ShortestPath.$fShowLabel3 w1
                   ShortestPath.B
                   -> GHC.Base.++ @ GHC.Types.Char ShortestPath.$fShowLabel2 w1
                   ShortestPath.C
                   -> GHC.Base.++ @ GHC.Types.Char ShortestPath.$fShowLabel1 w1 }) -}
083a1285be9e4389834c2ca2674d020e
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       ShortestPath.$fShowSection7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          ShortestPath.$fShowSection6
                          (case ww1 of ww4 { GHC.Types.I# ww5 ->
                           case GHC.Show.$wshowSignedInt
                                  0#
                                  ww5
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     ShortestPath.$fShowSection5
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        ShortestPath.$fShowSection4
                                        (case ww2 of ww6 { GHC.Types.I# ww7 ->
                                         case GHC.Show.$wshowSignedInt
                                                0#
                                                ww7
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   ShortestPath.$fShowSection5
                                                   (GHC.Base.++
                                                      @ GHC.Types.Char
                                                      ShortestPath.$fShowSection3
                                                      (case ww3 of ww8 { GHC.Types.I# ww9 ->
                                                       case GHC.Show.$wshowSignedInt
                                                              0#
                                                              ww9
                                                              (GHC.Base.++
                                                                 @ GHC.Types.Char
                                                                 ShortestPath.$fShowSection2
                                                                 x) of ww10 { (#,#) ww11 ww12 ->
                                                       GHC.Types.:
                                                         @ GHC.Types.Char
                                                         ww11
                                                         ww12 } }))) of ww8 { (#,#) ww9 ww10 ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           ww9
                                           ww10 } }))) of ww6 { (#,#) ww7 ww8 ->
                           GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
c37ee84ac83b3204d2a1f487cfdd6818
  $wgo ::
    [(ShortestPath.Label, GHC.Types.Int)]
    -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
076f2bfc62e59b6db5ea26da6bcb99db
  $wgo1 ::
    [(ShortestPath.Label, GHC.Types.Int)]
    -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
16e0972c95f456e06a118a7040771b91
  $wgo2 ::
    [ShortestPath.Section]
    -> ShortestPath.Path
    -> ShortestPath.Path
    -> (# ShortestPath.Path, ShortestPath.Path #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U>,
     Inline: [0] -}
25b39ff25493bff005bef606e51aec35
  $wgo3 ::
    [(ShortestPath.Label, GHC.Types.Int)]
    -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
5299a743874762f6929cf623bd8c5352
  $wgo4 ::
    [(ShortestPath.Label, GHC.Types.Int)]
    -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
9fee4f99af03aad7164cd92ba0a9c660
  $wgroupsOf :: GHC.Prim.Int# -> [a] -> [[a]]
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
cb2f9c1f3f5d69ca3004c97487582416
  $wroadStep ::
    ShortestPath.Path
    -> ShortestPath.Path
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (# ShortestPath.Path, ShortestPath.Path #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U(U)><L,U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: ShortestPath.Path)
                   (ww1 :: ShortestPath.Path)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: GHC.Types.Int) ->
                 let {
                   priceB :: GHC.Types.Int
                   = case ShortestPath.$wgo4 ww1 0# of ww5 { DEFAULT ->
                     GHC.Types.I# ww5 }
                 } in
                 let {
                   priceA :: GHC.Types.Int
                   = case ShortestPath.$wgo3 ww 0# of ww5 { DEFAULT ->
                     GHC.Types.I# ww5 }
                 } in
                 (# case priceB of wild { GHC.Types.I# x ->
                    case ww3 of wild1 { GHC.Types.I# y ->
                    case ww4 of wild2 { GHC.Types.I# y1 ->
                    case priceA of wild3 { GHC.Types.I# x1 ->
                    case ww2 of wild4 { GHC.Types.I# y2 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=#
                              (GHC.Prim.+# x1 y2)
                              (GHC.Prim.+# (GHC.Prim.+# x y) y1)) of wild5 {
                      GHC.Types.False
                      -> GHC.Types.:
                           @ (ShortestPath.Label, GHC.Types.Int)
                           (ShortestPath.C, wild2)
                           (GHC.Types.:
                              @ (ShortestPath.Label, GHC.Types.Int)
                              (ShortestPath.B, wild1)
                              ww1)
                      GHC.Types.True
                      -> GHC.Types.:
                           @ (ShortestPath.Label, GHC.Types.Int)
                           (ShortestPath.A, wild4)
                           ww } } } } } },
                    case priceA of wild { GHC.Types.I# x ->
                    case ww2 of wild1 { GHC.Types.I# y ->
                    case ww4 of wild2 { GHC.Types.I# y1 ->
                    case priceB of wild3 { GHC.Types.I# x1 ->
                    case ww3 of wild4 { GHC.Types.I# y2 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=#
                              (GHC.Prim.+# x1 y2)
                              (GHC.Prim.+# (GHC.Prim.+# x y) y1)) of wild5 {
                      GHC.Types.False
                      -> GHC.Types.:
                           @ (ShortestPath.Label, GHC.Types.Int)
                           (ShortestPath.C, wild2)
                           (GHC.Types.:
                              @ (ShortestPath.Label, GHC.Types.Int)
                              (ShortestPath.A, wild1)
                              ww)
                      GHC.Types.True
                      -> GHC.Types.:
                           @ (ShortestPath.Label, GHC.Types.Int)
                           (ShortestPath.B, wild4)
                           ww1 } } } } } } #)) -}
006a02dfdcd0b0e543a0cb5b88c170e0
  data Label = A | B | C
6574db070d74513953f852fa40116c64
  type Path = [(ShortestPath.Label, GHC.Types.Int)]
d0890b8098b20873368da4b50801641a
  type RoadSystem = [ShortestPath.Section]
93381fa2856156c6fbde615782ebacd7
  data Section
    = Section {getA :: GHC.Types.Int,
               getB :: GHC.Types.Int,
               getC :: GHC.Types.Int}
f01751ba88749c13e083925f5fbdd21b
  getA :: ShortestPath.Section -> GHC.Types.Int
  RecSel Left ShortestPath.Section
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ShortestPath.Section) ->
                 case ds of wild { ShortestPath.Section ds1 ds2 ds3 -> ds1 }) -}
f5729b271243c0b0392ff1b4aeed6222
  getB :: ShortestPath.Section -> GHC.Types.Int
  RecSel Left ShortestPath.Section
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ShortestPath.Section) ->
                 case ds of wild { ShortestPath.Section ds1 ds2 ds3 -> ds2 }) -}
340344302d5d8e649f88d69e0e963556
  getC :: ShortestPath.Section -> GHC.Types.Int
  RecSel Left ShortestPath.Section
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ShortestPath.Section) ->
                 case ds of wild { ShortestPath.Section ds1 ds2 ds3 -> ds3 }) -}
16afa2cfa35534944c0b87fec92f6f4c
  groupsOf :: GHC.Types.Int -> [a] -> [[a]]
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: [a]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 ShortestPath.$wgroupsOf @ a ww1 w1 }) -}
a86302aab1967e186dc7f52b20e1c5f1
  optimalPath :: ShortestPath.RoadSystem -> ShortestPath.Path
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (roadSystem :: ShortestPath.RoadSystem) ->
                 case ShortestPath.$wgo2
                        roadSystem
                        (GHC.Types.[] @ (ShortestPath.Label, GHC.Types.Int))
                        (GHC.Types.[]
                           @ (ShortestPath.Label, GHC.Types.Int)) of ww { (#,#) ww1 ww2 ->
                 case ShortestPath.$wgo1 ww1 0# of ww3 { DEFAULT ->
                 case ShortestPath.$wgo ww2 0# of ww4 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww3 ww4) of wild {
                   GHC.Types.False
                   -> GHC.List.reverse @ (ShortestPath.Label, GHC.Types.Int) ww2
                   GHC.Types.True
                   -> GHC.List.reverse
                        @ (ShortestPath.Label, GHC.Types.Int)
                        ww1 } } } }) -}
00c88d82e26fcb7c93bfa4341ca1e0dc
  roadStep ::
    (ShortestPath.Path, ShortestPath.Path)
    -> ShortestPath.Section -> (ShortestPath.Path, ShortestPath.Path)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,U)><S,1*U(U(U),U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (ShortestPath.Path, ShortestPath.Path))
                   (w1 :: ShortestPath.Section) ->
                 case w of ww { (,) ww1 ww2 ->
                 case w1 of ww3 { ShortestPath.Section ww4 ww5 ww6 ->
                 case ShortestPath.$wroadStep
                        ww1
                        ww2
                        ww4
                        ww5
                        ww6 of ww7 { (#,#) ww8 ww9 ->
                 (ww8, ww9) } } }) -}
instance [safe] GHC.Show.Show [ShortestPath.Label]
  = ShortestPath.$fShowLabel
instance [safe] GHC.Show.Show [ShortestPath.Section]
  = ShortestPath.$fShowSection
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

