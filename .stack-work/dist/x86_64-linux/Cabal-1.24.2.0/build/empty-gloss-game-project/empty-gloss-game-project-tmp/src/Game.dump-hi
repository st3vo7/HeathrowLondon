
==================== FINAL INTERFACE ====================
2019-07-03 10:09:45.202783 UTC

interface main@main:Game 8002
  interface hash: ebac117389fd5ff3b138e14c364ad6ee
  ABI hash: 596a6e6559397a3c48a1b67a37f50458
  export-list hash: 903aca7bb5165b1bdd86c2f04cd3ebbe
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bc3095f4b553734f0dadeae05b5c3808
  sig of: Nothing
  used TH splices: False
  where
exports:
  Game.charAtPosition
  Game.fromMaybeToInt
  Game.handleEvent
  Game.insertAt
  Game.minM
  Game.minim
  Game.replaceNth
  Game.setAorB
  Game.setC
  Game.update
  Game.wasB
  Game.zameni
  Game.Mode{Game.ModeAnimate Game.ModeEnd Game.ModeSplash}
  Game.State{Game.State cene_trojki contentScale krajnja_tabla mode pocetna_tabla windowSize}
module dependencies: Config
package dependencies: GLURaw-2.0.0.3@GLURaw-2.0.0.3-8mjdaTrY6fT50flhL8375P
                      GLUT-2.7.0.12@GLUT-2.7.0.12-1hjRN2wjD0V7bd3QjOEugK
                      JuicyPixels-3.2.8.2@JuicyPixels-3.2.8.2-JViBgltRj36L5XuDdgF7cx
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-EiFOWjUQWWuLyOhtrmuIWX
                      OpenGL-3.0.2.0@OpenGL-3.0.2.0-AneXe1zSg4KAYwAAwF6c1
                      OpenGLRaw-3.2.5.0@OpenGLRaw-3.2.5.0-FVpt3IkfQZvCtyIC3Snu0R
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-43OLkH0uuwm831pBFpx2PZ
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fixed-0.2.1.1@fixed-0.2.1.1-8Jr82l0kss5Gr4nEevmXlZ ghc-prim-0.5.0.0
                      gloss-1.10.2.5@gloss-1.10.2.5-EDPkhjN4e926j3oUsqTTMT
                      gloss-game-0.3.3.0@gloss-game-0.3.3.0-4sMIsRk9e9mDpSvX13whrm
                      gloss-juicy-0.2.2@gloss-juicy-0.2.2-BjcwtPSfHt1HGYiOTiDZ6y
                      gloss-rendering-1.10.3.5@gloss-rendering-1.10.3.5-FgDllLAutdLH3OZ8t4ZEzo
                      half-0.2.2.3@half-0.2.2.3-GHJ372Ls7FBA3PAGtGHfOR
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
                      zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.10.3.5@gloss-rendering-1.10.3.5-FgDllLAutdLH3OZ8t4ZEzo:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: JuicyPixels-3.2.8.2@JuicyPixels-3.2.8.2-JViBgltRj36L5XuDdgF7cx:Codec.Picture.Tga
                         JuicyPixels-3.2.8.2@JuicyPixels-3.2.8.2-JViBgltRj36L5XuDdgF7cx:Codec.Picture.Tiff
                         JuicyPixels-3.2.8.2@JuicyPixels-3.2.8.2-JViBgltRj36L5XuDdgF7cx:Codec.Picture.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp:Codec.Compression.Zlib.Stream
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-EDPkhjN4e926j3oUsqTTMT:Graphics.Gloss.Internals.Interface.Backend.Types 27c7a37ec0ef39978c14a4283451c288
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-EDPkhjN4e926j3oUsqTTMT:Graphics.Gloss.Internals.Interface.Event a13830d3a45a7b608eb64aa1877bc6f0
import  -/  gloss-game-0.3.3.0@gloss-game-0.3.3.0-4sMIsRk9e9mDpSvX13whrm:Graphics.Gloss.Game 3421bef7dfb0f57e993263f043c0a29c
import  -/  Config 2e9e080cc07eed1686f5894abde6d4db
  exports: b39e9c25461cdb937e7e3eb55f2778ce
20b588cd527e2d01c05816a17ec3cb88
  $fEqMode :: GHC.Classes.Eq Game.Mode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Game.Mode Game.$fEqMode_$c== Game.$fEqMode_$c/= -}
20b588cd527e2d01c05816a17ec3cb88
  $fEqMode_$c/= :: Game.Mode -> Game.Mode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Game.Mode) (b :: Game.Mode) ->
                 case a of wild {
                   Game.ModeSplash
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Game.ModeSplash -> GHC.Types.False }
                   Game.ModeAnimate
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Game.ModeAnimate -> GHC.Types.False }
                   Game.ModeEnd
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Game.ModeEnd -> GHC.Types.False } }) -}
20b588cd527e2d01c05816a17ec3cb88
  $fEqMode_$c== :: Game.Mode -> Game.Mode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Game.Mode) (ds1 :: Game.Mode) ->
                 case ds of wild {
                   Game.ModeSplash
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Game.ModeSplash -> GHC.Types.True }
                   Game.ModeAnimate
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Game.ModeAnimate -> GHC.Types.True }
                   Game.ModeEnd
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Game.ModeEnd -> GHC.Types.True } }) -}
20b588cd527e2d01c05816a17ec3cb88
  $fShowMode :: GHC.Show.Show Game.Mode
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Game.Mode
                  Game.$fShowMode_$cshowsPrec
                  Game.$fShowMode_$cshow
                  Game.$fShowMode_$cshowList -}
019bbe9bf9cad7d9b20c87916c3a06bc
  $fShowMode1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ModeEnd"#) -}
a69adec2104ec47e73979ae467fafb1f
  $fShowMode2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ModeAnimate"#) -}
eca883f1ac03ac6aba518cae13478f37
  $fShowMode3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ModeSplash"#) -}
20b588cd527e2d01c05816a17ec3cb88
  $fShowMode_$cshow :: Game.Mode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Game.Mode) ->
                 case x of wild {
                   Game.ModeSplash -> Game.$fShowMode3
                   Game.ModeAnimate -> Game.$fShowMode2
                   Game.ModeEnd -> Game.$fShowMode1 }) -}
20b588cd527e2d01c05816a17ec3cb88
  $fShowMode_$cshowList :: [Game.Mode] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Game.Mode Game.$w$cshowsPrec) -}
20b588cd527e2d01c05816a17ec3cb88
  $fShowMode_$cshowsPrec ::
    GHC.Types.Int -> Game.Mode -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Game.Mode)
                   (w2 :: GHC.Base.String) ->
                 Game.$w$cshowsPrec w1 w2) -}
2a0afa603b4a56b0bd514e766bbf00ea
  $fShowState :: GHC.Show.Show Game.State
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Game.State
                  Game.$fShowState_$cshowsPrec
                  Game.$fShowState_$cshow
                  Game.$fShowState_$cshowList -}
2a0afa603b4a56b0bd514e766bbf00ea
  $fShowState1 :: Game.State -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Game.State) ->
                 case w of ww { Game.State ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Game.$w$cshowsPrec1 0# ww1 ww2 ww3 ww4 ww5 ww6 }) -}
2a0afa603b4a56b0bd514e766bbf00ea
  $fShowState_$cshow :: Game.State -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U(U(U),U(U)),1*U(U),U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Game.State) ->
                 Game.$fShowState_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2a0afa603b4a56b0bd514e766bbf00ea
  $fShowState_$cshowList :: [Game.State] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Game.State Game.$fShowState1) -}
2a0afa603b4a56b0bd514e766bbf00ea
  $fShowState_$cshowsPrec ::
    GHC.Types.Int -> Game.State -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,U,U(U(U),U(U)),1*U(U),U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Game.State) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Game.State ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Game.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 ww7 ww8 } }) -}
903d8bcb56d78fbe5e849f8e846e3e3d
  $tc'ModeAnimate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   736772788357120337##
                   4619688859298264608##
                   Game.$trModule
                   Game.$tc'ModeAnimate1) -}
f8b5af9d00ecdc4897e05baa83e164a7
  $tc'ModeAnimate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ModeAnimate"#) -}
e8e4e5461b64e4c2a8e14b37a1be2068
  $tc'ModeEnd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3927514220302712707##
                   10601841780863928920##
                   Game.$trModule
                   Game.$tc'ModeEnd1) -}
fc545a962ee1fa1591a2f8a51093b8f0
  $tc'ModeEnd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ModeEnd"#) -}
5edcca5bd10dd149094e875cddb786e8
  $tc'ModeSplash :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8865125549721206747##
                   3433679442212949325##
                   Game.$trModule
                   Game.$tc'ModeSplash1) -}
93a7ff4414817fbae33013ea39ddf353
  $tc'ModeSplash1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ModeSplash"#) -}
1e195390a47bb83c75e7a8569978c02c
  $tc'State :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15316811764301273498##
                   14301965037990408381##
                   Game.$trModule
                   Game.$tc'State1) -}
0b7116823e9ad60c635a833cbfa72521
  $tc'State1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'State"#) -}
06356f9f41f7c97d2dab259a1c2fec03
  $tcMode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9644488715116256375##
                   8556283505257178085##
                   Game.$trModule
                   Game.$tcMode1) -}
cc64566165a607f6f29f241bb4ef82bc
  $tcMode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Mode"#) -}
74f86e606884aaa6946ff177bd2d2884
  $tcState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3965096395309848409##
                   12771853970897014927##
                   Game.$trModule
                   Game.$tcState1) -}
04a136ceb904023c873e637650c05d32
  $tcState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "State"#) -}
e83626f96954699c59f8808db22ac95a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Game.$trModule2 Game.$trModule1) -}
605e50c590694519b5cfcc57ee0a0d21
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Game"#) -}
bfddda3a7f73c81040d44c90c2e0e17b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
20b588cd527e2d01c05816a17ec3cb88
  $w$cshowsPrec :: Game.Mode -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Game.Mode) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Game.ModeSplash -> GHC.Base.++ @ GHC.Types.Char Game.$fShowMode3 w1
                   Game.ModeAnimate
                   -> GHC.Base.++ @ GHC.Types.Char Game.$fShowMode2 w1
                   Game.ModeEnd
                   -> GHC.Base.++ @ GHC.Types.Char Game.$fShowMode1 w1 }) -}
02cd6fceba019797e90748fa7c40a921
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [[GHC.Types.Int]]
    -> Game.Mode
    -> (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Types.Float
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <S,U><L,U><L,U><L,U(U(U),U(U))><L,1*U(U)><L,U><L,U>,
     Inline: [0] -}
7281d4f542ba3122962c5a4f37e95ec7
  $winsertAt :: a -> GHC.Prim.Int# -> [a] -> (# a, [a] #)
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0] -}
02ea2fc82230c6c7bb951f6f03425b9f
  $wsetAorB ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> (GHC.Types.Int, GHC.Types.Int)
    -> (# [GHC.Base.String], [GHC.Base.String] #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U(U),U)>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: [GHC.Base.String])
                   (w2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 (# Game.replaceNth
                      @ [GHC.Types.Char]
                      (Data.Tuple.fst @ GHC.Types.Int @ GHC.Types.Int w2)
                      (case w2 of wild { (,) x ds1 ->
                       case x of ww { GHC.Types.I# ww1 ->
                       Game.replaceNth
                         @ GHC.Types.Char
                         ds1
                         Game.setAorB2
                         (GHC.List.$w!! @ GHC.Base.String w ww1) } })
                      w,
                    Game.replaceNth
                      @ [GHC.Types.Char]
                      (Data.Tuple.fst @ GHC.Types.Int @ GHC.Types.Int w2)
                      (case w2 of wild { (,) x ds1 ->
                       case x of ww { GHC.Types.I# ww1 ->
                       Game.replaceNth
                         @ GHC.Types.Char
                         ds1
                         Game.setAorB1
                         (GHC.List.$w!! @ GHC.Base.String w1 ww1) } })
                      w1 #)) -}
5f5d98f76cc6203e846079869495786c
  $wsetC ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> (GHC.Types.Int, GHC.Types.Int)
    -> (# [GHC.Base.String], [GHC.Base.String] #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U(1*U(U),U(U))>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: [GHC.Base.String])
                   (w2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 let {
                   indx :: GHC.Types.Int
                   = case w2 of ww { (,) ww1 ww2 ->
                     case ww2 of ww3 { GHC.Types.I# ww4 ->
                     case Game.$wwasB w ww4 of wild {
                       GHC.Types.False -> ww1
                       GHC.Types.True
                       -> case GHC.List.$wlenAcc
                                 @ [GHC.Types.Char]
                                 w
                                 0# of ww5 { DEFAULT ->
                          case ww1 of wild1 { GHC.Types.I# y ->
                          GHC.Types.I# (GHC.Prim.-# (GHC.Prim.-# ww5 1#) y) } } } } }
                 } in
                 (# Game.replaceNth
                      @ [GHC.Types.Char]
                      indx
                      (Game.replaceNth
                         @ GHC.Types.Char
                         (Data.Tuple.snd @ GHC.Types.Int @ GHC.Types.Int w2)
                         Game.setC1
                         (GHC.List.!! @ GHC.Base.String w indx))
                      w,
                    Game.replaceNth
                      @ [GHC.Types.Char]
                      indx
                      (Game.replaceNth
                         @ GHC.Types.Char
                         (Data.Tuple.snd @ GHC.Types.Int @ GHC.Types.Int w2)
                         Game.setAorB1
                         (GHC.List.!! @ GHC.Base.String w1 indx))
                      w1 #)) -}
750bcecde6aaf8d5d682ec0c551c2466
  $wwasB :: [GHC.Base.String] -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String]) (ww :: GHC.Prim.Int#) ->
                 case GHC.List.$wlenAcc @ [GHC.Types.Char] w 0# of ww2 { DEFAULT ->
                 case GHC.List.$w!!
                        @ GHC.Types.Char
                        (GHC.List.$w!! @ GHC.Base.String w (GHC.Prim.-# ww2 1#))
                        (GHC.Prim.-# ww 1#) of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.False '?'# -> GHC.Types.True } } }) -}
c93599c98fca19dca4938237428acd51
  $wzameni ::
    [GHC.Base.String]
    -> [GHC.Base.String] -> (# [GHC.Base.String], [GHC.Base.String] #)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String]) (w1 :: [GHC.Base.String]) ->
                 case Game.charAtPosition w1 Game.setAorB2 of wild { (,) x ds1 ->
                 case x of wild1 { GHC.Types.I# x1 ->
                 case x1 of wild2 {
                   DEFAULT -> Game.$wsetC w w1 wild
                   0# -> Game.$wsetAorB w w1 wild
                   6# -> Game.$wsetAorB w w1 wild } } }) -}
20b588cd527e2d01c05816a17ec3cb88
  data Mode = ModeSplash | ModeAnimate | ModeEnd
2a0afa603b4a56b0bd514e766bbf00ea
  data State
    = State {cene_trojki :: [[GHC.Types.Int]],
             mode :: Game.Mode,
             windowSize :: (GHC.Types.Int, GHC.Types.Int),
             contentScale :: GHC.Types.Float,
             pocetna_tabla :: [GHC.Base.String],
             krajnja_tabla :: [GHC.Base.String]}
fa2ea8a09c9ac818abcc9b896d52a1f8
  cene_trojki :: Game.State -> [[GHC.Types.Int]]
  RecSel Left Game.State
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Game.State) ->
                 case ds of wild { Game.State ds1 ds2 ds3 ds4 ds5 ds6 -> ds1 }) -}
f93423d1f126f40f4d04b835517b3db3
  charAtPosition ::
    [[GHC.Types.Char]]
    -> GHC.Types.Char -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2, Strictness: <S,U><L,U(U)>,
     Unfolding: (\ (lista :: [[GHC.Types.Char]])
                   (kar :: GHC.Types.Char) ->
                 case GHC.List.$wlenAcc
                        @ [GHC.Types.Char]
                        lista
                        0# of ww2 { DEFAULT ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 0# y) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: GHC.Prim.Int#
                              -> [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
                          {- Arity: 2, Strictness: <L,U><S,1*U> -}
                        = \ (x :: GHC.Prim.Int#) (eta :: [GHC.Types.Int]) ->
                          case eta of wild1 {
                            [] -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int)
                            : y1 ys
                            -> GHC.Types.:
                                 @ (GHC.Types.Int, GHC.Types.Int)
                                 (GHC.Types.I# x, y1)
                                 (case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.==# x y) of wild2 {
                                    GHC.Types.False -> go (GHC.Prim.+# x 1#) ys
                                    GHC.Types.True
                                    -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int) }) }
                      } in
                      Game.minim
                        (go
                           0#
                           (GHC.Base.map
                              @ [GHC.Types.Char]
                              @ GHC.Types.Int
                              (Game.fromMaybeToInt kar)
                              lista))
                   GHC.Types.True -> Game.charAtPosition1 } }) -}
529215cd1785885b100cc0d8b7dfa696
  charAtPosition1 :: (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: (Game.minim
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))) -}
4ebfeeb250a01fdf2ac22945ffe44866
  contentScale :: Game.State -> GHC.Types.Float
  RecSel Left Game.State
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Game.State) ->
                 case ds of wild { Game.State ds1 ds2 ds3 ds4 ds5 ds6 -> ds4 }) -}
63632a495b1b43c90a339c346e7d9289
  fromMaybeToInt ::
    GHC.Types.Char -> [GHC.Types.Char] -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (kar :: GHC.Types.Char) (lista :: [GHC.Types.Char]) ->
                 case Data.OldList.findIndex
                        @ GHC.Types.Char
                        (GHC.Classes.eqChar kar)
                        lista of wild {
                   GHC.Base.Nothing -> GHC.Base.maxInt GHC.Base.Just a1 -> a1 }) -}
89ca43e1212e00c6a09218521d382e03
  handleEvent ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Game.State -> Game.State
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U(U,U,U,U,U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (w1 :: Game.State) ->
                 case w1 of ww { Game.State ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w of wild {
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds ds1 ds2 ds3
                   -> case ds of wild1 {
                        Graphics.Gloss.Internals.Interface.Backend.Types.Char ds4
                        -> case ds4 of wild2 { GHC.Types.C# ds5 ->
                           case ds5 of ds6 {
                             DEFAULT -> Game.State ww1 ww2 ww3 ww4 ww5 ww6
                             '0'#
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> Game.State ww1 Game.ModeSplash ww3 ww4 ww5 ww6
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Game.State ww1 ww2 ww3 ww4 ww5 ww6 }
                             '1'#
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> Game.State ww1 ww2 ww3 Game.handleEvent2 ww5 ww6
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Game.State ww1 ww2 ww3 ww4 ww5 ww6 }
                             '2'#
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> Game.State ww1 ww2 ww3 Game.handleEvent1 ww5 ww6
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Game.State ww1 ww2 ww3 ww4 ww5 ww6 } } }
                        Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey ds4
                        -> case ds4 of wild2 {
                             DEFAULT -> Game.State ww1 ww2 ww3 ww4 ww5 ww6
                             Graphics.Gloss.Internals.Interface.Backend.Types.KeySpace
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> Game.State ww1 Game.ModeAnimate ww3 ww4 ww5 ww6
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Game.State ww1 ww2 ww3 ww4 ww5 ww6 } }
                        Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton ipv
                        -> Game.State ww1 ww2 ww3 ww4 ww5 ww6 }
                   Graphics.Gloss.Internals.Interface.Event.EventMotion ipv
                   -> Game.State ww1 ww2 ww3 ww4 ww5 ww6
                   Graphics.Gloss.Internals.Interface.Event.EventResize size
                   -> Game.State ww1 ww2 size ww4 ww5 ww6 } }) -}
5a2e837516e5a78ae9d5b9d160fac07a
  handleEvent1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 2.0#) -}
5a41cac64ca01c417c8d005956cb7567
  handleEvent2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
bd5f97126194dc24605ec1cc96b7bbf9
  insertAt :: a -> GHC.Types.Int -> [a] -> [a]
  {- Arity: 3, Strictness: <L,U><S(S),1*U(1*U)><L,U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: a) (w1 :: GHC.Types.Int) (w2 :: [a]) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case Game.$winsertAt @ a w ww1 w2 of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ a ww3 ww4 } }) -}
df746ec7fe37148858fc6e41c012ce9f
  krajnja_tabla :: Game.State -> [GHC.Base.String]
  RecSel Left Game.State
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Game.State) ->
                 case ds of wild { Game.State ds1 ds2 ds3 ds4 ds5 ds6 -> ds6 }) -}
7d2130ba26bd130b0ef0534b5edc0cf9
  minM ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int) -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2,
     Strictness: <S(LS(S)),1*U(U,U(U))><S(LS(S)),1*U(U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { (,) ww6 ww7 ->
                 case ww7 of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# ww4 ww9) of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww4 ww9) of wild2 {
                             GHC.Types.False -> Game.minM1
                             GHC.Types.True -> (ww1, GHC.Types.I# ww4) }
                        GHC.Types.True -> (ww1, GHC.Types.I# ww4) }
                   GHC.Types.True -> (ww6, GHC.Types.I# ww9) } } } } }) -}
4bf55a2656587ad59b5493259816209b
  minM1 :: (GHC.Types.Int, GHC.Types.Int)
  {- Strictness: x -}
8e4b9934750b488aef2cb288087e8855
  minim ::
    [(GHC.Types.Int, GHC.Types.Int)] -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U> -}
024ab839a4a70c0c47c8981b44e4ab17
  mode :: Game.State -> Game.Mode
  RecSel Left Game.State
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Game.State) ->
                 case ds of wild { Game.State ds1 ds2 ds3 ds4 ds5 ds6 -> ds2 }) -}
c6fe8ceb3e5f8895bf7b4eaf123122f9
  pocetna_tabla :: Game.State -> [GHC.Base.String]
  RecSel Left Game.State
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Game.State) ->
                 case ds of wild { Game.State ds1 ds2 ds3 ds4 ds5 ds6 -> ds5 }) -}
37a570aa42f9dc3274939e08cfc6c5b9
  replaceNth :: GHC.Types.Int -> a -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(1*U)><L,U><S,1*U> -}
0b1aa603abb04769c3ff51885472b5e0
  setAorB ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> (GHC.Types.Int, GHC.Types.Int)
    -> ([GHC.Base.String], [GHC.Base.String])
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U(U),U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Base.String])
                   (w1 :: [GHC.Base.String])
                   (w2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case Game.$wsetAorB w w1 w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
5bf8a1489e579ee9461f577b906cfed5
  setAorB1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'x'#) -}
40ac365fecdcb9eb320a8677f0ab60fa
  setAorB2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '?'#) -}
fe226ac081b1f08ea35b27434c637ff6
  setC ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> (GHC.Types.Int, GHC.Types.Int)
    -> ([GHC.Base.String], [GHC.Base.String])
  {- Arity: 3, Strictness: <L,U><L,U><L,U(1*U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Base.String])
                   (w1 :: [GHC.Base.String])
                   (w2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case Game.$wsetC w w1 w2 of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
e1c6ef34ae9847cf3d4ce9f871d91f41
  setC1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '!'#) -}
95c1fa8a36882664ed27758a9e1f3b2d
  update :: GHC.Types.Float -> Game.State -> Game.State
  {- Arity: 2, Strictness: <L,A><S,1*U(U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w1 :: Game.State) ->
                 case w1 of ww { Game.State ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Game.State
                   ww1
                   ww2
                   ww3
                   ww4
                   (case Game.$wzameni ww5 ww6 of ww7 { (#,#) ww8 ww9 -> ww8 })
                   (case Game.$wzameni ww5 ww6 of ww7 { (#,#) ww8 ww9 -> ww9 }) }) -}
5a863be110d1abe99c65cceadeb19632
  wasB ::
    [GHC.Base.String]
    -> (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S(LS(S)),1*U(A,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [GHC.Base.String])
                   (w1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { GHC.Types.I# ww4 -> Game.$wwasB w ww4 } }) -}
90bfd89a16b6b9cbb70b05502e30ffb1
  windowSize :: Game.State -> (GHC.Types.Int, GHC.Types.Int)
  RecSel Left Game.State
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Game.State) ->
                 case ds of wild { Game.State ds1 ds2 ds3 ds4 ds5 ds6 -> ds3 }) -}
fe096e7c4ff0fb9a19761712cc5c8e01
  zameni ::
    [GHC.Base.String]
    -> [GHC.Base.String] -> ([GHC.Base.String], [GHC.Base.String])
  {- Arity: 2, Strictness: <L,U><S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [GHC.Base.String]) (w1 :: [GHC.Base.String]) ->
                 case Game.$wzameni w w1 of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
instance GHC.Classes.Eq [Game.Mode] = Game.$fEqMode
instance GHC.Show.Show [Game.Mode] = Game.$fShowMode
instance GHC.Show.Show [Game.State] = Game.$fShowState
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

